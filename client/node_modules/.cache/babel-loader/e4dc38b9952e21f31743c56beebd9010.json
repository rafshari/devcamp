{"ast":null,"code":"import axios from \"axios\";\nimport { GET_REVIEWS, GET_REVIEW, REMOVE_REVIEW, REVIEW_ERROR, LOAD_REVIEW, UNLOAD_REVIEW } from \"./types\";\nimport { createAlert } from \"./alert\";\nimport composeUrl from \"../../utils/composeUrl\";\n\n// Get all reviews from database or get reviews by bootcamp\nexport const getReviews = (bootcampId, filters) => async dispatch => {\n  let url = \"/api/v1/reviews\";\n  if (bootcampId) {\n    url = `/api/v1/bootcamps/${bootcampId}/reviews`;\n  } else if (filters) {\n    url = composeUrl(url, filters);\n  }\n  try {\n    const res = await axios.get(url);\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Get review from database by id\nexport const getReview = reviewId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/v1/reviews/${reviewId}`);\n    dispatch({\n      type: GET_REVIEW,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Get reviews by user\nexport const getUserReviews = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/v1/reviews/users/${userId}`);\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Add review for a bootcamp\nexport const addReview = (bootcampId, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(`/api/v1/bootcamps/${bootcampId}/reviews`, formData, config);\n\n    // Check: 'Double request to get reviews'\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data\n    });\n    dispatch(createAlert(\"Review added.\", \"success\", 3500));\n    history.push(\"/manage-reviews\");\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Load review for the ReviewForm if it's going to be updated\n// Only used for the EditReviews Component\nexport const loadReview = reviewId => dispatch => {\n  dispatch({\n    type: LOAD_REVIEW,\n    payload: reviewId\n  });\n};\n\n// Unload review for the ReviewForm when user is going to add a new one\nexport const unLoadReview = () => dispatch => {\n  dispatch({\n    type: UNLOAD_REVIEW\n  });\n};\n\n// Load Bootcamp Review when user wants to modify the review after watching the bootcamp\n// This makes the review load faster for the ReviewForm\nexport const loadBootcampReview = review => dispatch => {\n  dispatch({\n    type: GET_REVIEW,\n    payload: {\n      data: review\n    }\n  });\n};\n\n// Update review from database by id\nexport const updateReview = (reviewId, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.put(`/api/v1/reviews/${reviewId}`, formData, config);\n    dispatch({\n      type: GET_REVIEW,\n      payload: res.data\n    });\n    dispatch(createAlert(\"Review updated.\", \"success\", 2500));\n    history.push(\"/manage-reviews\");\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Delete review from database by id\nexport const removeReview = reviewId => async dispatch => {\n  if (window.confirm(\"Are you sure? This action can NOT be undone.\")) {\n    try {\n      await axios.delete(`/api/v1/reviews/${reviewId}`);\n      dispatch({\n        type: REMOVE_REVIEW,\n        payload: reviewId\n      });\n      dispatch(createAlert(\"Review removed.\", \"danger\", 2500));\n    } catch (error) {\n      dispatch({\n        type: REVIEW_ERROR,\n        payload: error.response\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","GET_REVIEWS","GET_REVIEW","REMOVE_REVIEW","REVIEW_ERROR","LOAD_REVIEW","UNLOAD_REVIEW","createAlert","composeUrl","getReviews","bootcampId","filters","dispatch","url","res","get","type","payload","data","error","response","getReview","reviewId","getUserReviews","userId","addReview","formData","history","config","headers","post","push","loadReview","unLoadReview","loadBootcampReview","review","updateReview","put","removeReview","window","confirm","delete"],"sources":["E:/2-myprojects/devcamp/client/src/redux/actions/reviews.js"],"sourcesContent":["import axios from \"axios\";\n\nimport {\n  GET_REVIEWS,\n  GET_REVIEW,\n  REMOVE_REVIEW,\n  REVIEW_ERROR,\n  LOAD_REVIEW,\n  UNLOAD_REVIEW,\n} from \"./types\";\n\nimport { createAlert } from \"./alert\";\n\nimport composeUrl from \"../../utils/composeUrl\";\n\n// Get all reviews from database or get reviews by bootcamp\nexport const getReviews = (bootcampId, filters) => async (dispatch) => {\n  let url = \"/api/v1/reviews\";\n  if (bootcampId) {\n    url = `/api/v1/bootcamps/${bootcampId}/reviews`;\n  } else if (filters) {\n    url = composeUrl(url, filters);\n  }\n\n  try {\n    const res = await axios.get(url);\n\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Get review from database by id\nexport const getReview = (reviewId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/v1/reviews/${reviewId}`);\n\n    dispatch({\n      type: GET_REVIEW,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Get reviews by user\nexport const getUserReviews = (userId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/v1/reviews/users/${userId}`);\n\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Add review for a bootcamp\nexport const addReview = (bootcampId, formData, history) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const res = await axios.post(\n      `/api/v1/bootcamps/${bootcampId}/reviews`,\n      formData,\n      config\n    );\n\n    // Check: 'Double request to get reviews'\n    dispatch({\n      type: GET_REVIEWS,\n      payload: res.data,\n    });\n\n    dispatch(createAlert(\"Review added.\", \"success\", 3500));\n\n    history.push(\"/manage-reviews\");\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Load review for the ReviewForm if it's going to be updated\n// Only used for the EditReviews Component\nexport const loadReview = (reviewId) => (dispatch) => {\n  dispatch({\n    type: LOAD_REVIEW,\n    payload: reviewId,\n  });\n};\n\n// Unload review for the ReviewForm when user is going to add a new one\nexport const unLoadReview = () => (dispatch) => {\n  dispatch({\n    type: UNLOAD_REVIEW,\n  });\n};\n\n// Load Bootcamp Review when user wants to modify the review after watching the bootcamp\n// This makes the review load faster for the ReviewForm\nexport const loadBootcampReview = (review) => (dispatch) => {\n  dispatch({\n    type: GET_REVIEW,\n    payload: { data: review },\n  });\n};\n\n// Update review from database by id\nexport const updateReview = (reviewId, formData, history) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const res = await axios.put(\n      `/api/v1/reviews/${reviewId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: GET_REVIEW,\n      payload: res.data,\n    });\n\n    dispatch(createAlert(\"Review updated.\", \"success\", 2500));\n\n    history.push(\"/manage-reviews\");\n  } catch (error) {\n    dispatch({\n      type: REVIEW_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Delete review from database by id\nexport const removeReview = (reviewId) => async (dispatch) => {\n  if (window.confirm(\"Are you sure? This action can NOT be undone.\")) {\n    try {\n      await axios.delete(`/api/v1/reviews/${reviewId}`);\n\n      dispatch({\n        type: REMOVE_REVIEW,\n        payload: reviewId,\n      });\n\n      dispatch(createAlert(\"Review removed.\", \"danger\", 2500));\n    } catch (error) {\n      dispatch({\n        type: REVIEW_ERROR,\n        payload: error.response,\n      });\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SACEC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXC,aAAa,QACR,SAAS;AAEhB,SAASC,WAAW,QAAQ,SAAS;AAErC,OAAOC,UAAU,MAAM,wBAAwB;;AAE/C;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,UAAU,EAAEC,OAAO,KAAK,MAAOC,QAAQ,IAAK;EACrE,IAAIC,GAAG,GAAG,iBAAiB;EAC3B,IAAIH,UAAU,EAAE;IACdG,GAAG,GAAI,qBAAoBH,UAAW,UAAS;EACjD,CAAC,MAAM,IAAIC,OAAO,EAAE;IAClBE,GAAG,GAAGL,UAAU,CAACK,GAAG,EAAEF,OAAO,CAAC;EAChC;EAEA,IAAI;IACF,MAAMG,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACF,GAAG,CAAC;IAEhCD,QAAQ,CAAC;MACPI,IAAI,EAAEf,WAAW;MACjBgB,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK,MAAOV,QAAQ,IAAK;EACzD,IAAI;IACF,MAAME,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,mBAAkBO,QAAS,EAAC,CAAC;IAE1DV,QAAQ,CAAC;MACPI,IAAI,EAAEd,UAAU;MAChBe,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAIC,MAAM,IAAK,MAAOZ,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAME,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAE,yBAAwBS,MAAO,EAAC,CAAC;IAE9DZ,QAAQ,CAAC;MACPI,IAAI,EAAEf,WAAW;MACjBgB,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,SAAS,GAAG,CAACf,UAAU,EAAEgB,QAAQ,EAAEC,OAAO,KAAK,MAC1Df,QAAQ,IACL;EACH,IAAI;IACF,MAAMgB,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMf,GAAG,GAAG,MAAMd,KAAK,CAAC8B,IAAI,CACzB,qBAAoBpB,UAAW,UAAS,EACzCgB,QAAQ,EACRE,MAAM,CACP;;IAED;IACAhB,QAAQ,CAAC;MACPI,IAAI,EAAEf,WAAW;MACjBgB,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFN,QAAQ,CAACL,WAAW,CAAC,eAAe,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAEvDoB,OAAO,CAACI,IAAI,CAAC,iBAAiB,CAAC;EACjC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA;AACA,OAAO,MAAMY,UAAU,GAAIV,QAAQ,IAAMV,QAAQ,IAAK;EACpDA,QAAQ,CAAC;IACPI,IAAI,EAAEX,WAAW;IACjBY,OAAO,EAAEK;EACX,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,YAAY,GAAG,MAAOrB,QAAQ,IAAK;EAC9CA,QAAQ,CAAC;IACPI,IAAI,EAAEV;EACR,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA,OAAO,MAAM4B,kBAAkB,GAAIC,MAAM,IAAMvB,QAAQ,IAAK;EAC1DA,QAAQ,CAAC;IACPI,IAAI,EAAEd,UAAU;IAChBe,OAAO,EAAE;MAAEC,IAAI,EAAEiB;IAAO;EAC1B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,CAACd,QAAQ,EAAEI,QAAQ,EAAEC,OAAO,KAAK,MAC3Df,QAAQ,IACL;EACH,IAAI;IACF,MAAMgB,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMf,GAAG,GAAG,MAAMd,KAAK,CAACqC,GAAG,CACxB,mBAAkBf,QAAS,EAAC,EAC7BI,QAAQ,EACRE,MAAM,CACP;IAEDhB,QAAQ,CAAC;MACPI,IAAI,EAAEd,UAAU;MAChBe,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFN,QAAQ,CAACL,WAAW,CAAC,iBAAiB,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAEzDoB,OAAO,CAACI,IAAI,CAAC,iBAAiB,CAAC;EACjC,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACdP,QAAQ,CAAC;MACPI,IAAI,EAAEZ,YAAY;MAClBa,OAAO,EAAEE,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,YAAY,GAAIhB,QAAQ,IAAK,MAAOV,QAAQ,IAAK;EAC5D,IAAI2B,MAAM,CAACC,OAAO,CAAC,8CAA8C,CAAC,EAAE;IAClE,IAAI;MACF,MAAMxC,KAAK,CAACyC,MAAM,CAAE,mBAAkBnB,QAAS,EAAC,CAAC;MAEjDV,QAAQ,CAAC;QACPI,IAAI,EAAEb,aAAa;QACnBc,OAAO,EAAEK;MACX,CAAC,CAAC;MAEFV,QAAQ,CAACL,WAAW,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdP,QAAQ,CAAC;QACPI,IAAI,EAAEZ,YAAY;QAClBa,OAAO,EAAEE,KAAK,CAACC;MACjB,CAAC,CAAC;IACJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module"}