{"ast":null,"code":"import axios from \"axios\";\nimport { GET_COURSES, GET_COURSE, REMOVE_COURSE, COURSE_ERROR, LOAD_COURSE, UNLOAD_COURSE } from \"./types\";\nimport { createAlert } from \"./alert\";\nimport composeUrl from \"../../utils/composeUrl\";\n\n// Get all courses from database or get courses by bootcamp\nexport const getCourses = (bootcampId, filters) => async dispatch => {\n  let url = \"/api/v1/courses\";\n  if (bootcampId) {\n    url = `/api/v1/bootcamps/${bootcampId}/courses`;\n  } else if (filters) {\n    url = composeUrl(url, filters);\n  }\n  try {\n    const res = await axios.get(url);\n    dispatch({\n      type: GET_COURSES,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Get course from database by id\nexport const getCourse = courseId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/v1/courses/${courseId}`);\n    dispatch({\n      type: GET_COURSE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Add course for a bootcamp\nexport const addCourse = (bootcampId, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    await axios.post(`/api/v1/bootcamps/${bootcampId}/courses`, formData, config);\n    dispatch(getCourses(bootcampId));\n    dispatch(createAlert(\"Course created.\", \"success\", 3500));\n    history.push(\"/manage-courses\");\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Load course for the CourseForm\nexport const loadCourse = courseId => dispatch => {\n  dispatch({\n    type: LOAD_COURSE,\n    payload: courseId\n  });\n};\n\n// Unload course for the CourseForm when user is going to add a new course\nexport const unLoadCourse = () => dispatch => {\n  dispatch({\n    type: UNLOAD_COURSE\n  });\n};\n\n// Update course from database by id\nexport const updateCourse = (courseId, formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.put(`/api/v1/courses/${courseId}`, formData, config);\n    dispatch({\n      type: GET_COURSE,\n      payload: res.data\n    });\n    dispatch(createAlert(\"Course updated.\", \"success\", 2500));\n    history.push(\"/manage-courses\");\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response\n    });\n  }\n};\n\n// Delete course from database by id\nexport const deleteCourse = courseId => async dispatch => {\n  if (window.confirm(\"Are you sure? This action can NOT be undone.\")) {\n    try {\n      await axios.delete(`/api/v1/courses/${courseId}`);\n      dispatch({\n        type: REMOVE_COURSE,\n        payload: courseId\n      });\n      dispatch(createAlert(\"Course deleted.\", \"danger\", 2500));\n    } catch (error) {\n      dispatch({\n        type: COURSE_ERROR,\n        payload: error.response\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","GET_COURSES","GET_COURSE","REMOVE_COURSE","COURSE_ERROR","LOAD_COURSE","UNLOAD_COURSE","createAlert","composeUrl","getCourses","bootcampId","filters","dispatch","url","res","get","type","payload","data","error","response","getCourse","courseId","addCourse","formData","history","config","headers","post","push","loadCourse","unLoadCourse","updateCourse","put","deleteCourse","window","confirm","delete"],"sources":["E:/2-myprojects/devcamp/client/src/redux/actions/courses.js"],"sourcesContent":["import axios from \"axios\";\nimport {\n  GET_COURSES,\n  GET_COURSE,\n  REMOVE_COURSE,\n  COURSE_ERROR,\n  LOAD_COURSE,\n  UNLOAD_COURSE,\n} from \"./types\";\n\nimport { createAlert } from \"./alert\";\n\nimport composeUrl from \"../../utils/composeUrl\";\n\n// Get all courses from database or get courses by bootcamp\nexport const getCourses = (bootcampId, filters) => async (dispatch) => {\n  let url = \"/api/v1/courses\";\n  if (bootcampId) {\n    url = `/api/v1/bootcamps/${bootcampId}/courses`;\n  } else if (filters) {\n    url = composeUrl(url, filters);\n  }\n\n  try {\n    const res = await axios.get(url);\n\n    dispatch({\n      type: GET_COURSES,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Get course from database by id\nexport const getCourse = (courseId) => async (dispatch) => {\n  try {\n    const res = await axios.get(`/api/v1/courses/${courseId}`);\n\n    dispatch({\n      type: GET_COURSE,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Add course for a bootcamp\nexport const addCourse = (bootcampId, formData, history) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    await axios.post(\n      `/api/v1/bootcamps/${bootcampId}/courses`,\n      formData,\n      config\n    );\n\n    dispatch(getCourses(bootcampId));\n\n    dispatch(createAlert(\"Course created.\", \"success\", 3500));\n\n    history.push(\"/manage-courses\");\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Load course for the CourseForm\nexport const loadCourse = (courseId) => (dispatch) => {\n  dispatch({\n    type: LOAD_COURSE,\n    payload: courseId,\n  });\n};\n\n// Unload course for the CourseForm when user is going to add a new course\nexport const unLoadCourse = () => (dispatch) => {\n  dispatch({\n    type: UNLOAD_COURSE,\n  });\n};\n\n// Update course from database by id\nexport const updateCourse = (courseId, formData, history) => async (\n  dispatch\n) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const res = await axios.put(\n      `/api/v1/courses/${courseId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: GET_COURSE,\n      payload: res.data,\n    });\n\n    dispatch(createAlert(\"Course updated.\", \"success\", 2500));\n\n    history.push(\"/manage-courses\");\n  } catch (error) {\n    dispatch({\n      type: COURSE_ERROR,\n      payload: error.response,\n    });\n  }\n};\n\n// Delete course from database by id\nexport const deleteCourse = (courseId) => async (dispatch) => {\n  if (window.confirm(\"Are you sure? This action can NOT be undone.\")) {\n    try {\n      await axios.delete(`/api/v1/courses/${courseId}`);\n\n      dispatch({\n        type: REMOVE_COURSE,\n        payload: courseId,\n      });\n\n      dispatch(createAlert(\"Course deleted.\", \"danger\", 2500));\n    } catch (error) {\n      dispatch({\n        type: COURSE_ERROR,\n        payload: error.response,\n      });\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}